import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'


version = '1.0'
group = 'com.robotmonkey1000.VaultIntegration' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'vaultIntegration'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    mavenCentral()
}

mixin {
    add sourceSets.main, "vaultintegration.refmap.json"
}


configurations {
    mods
    shade
    compile.extendsFrom shade
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.42'
    implementation files('libs/the_vault-1.0.3-customized.jar')
//    compile 'com.mojang:brigadier:1.0.17'

    shade 'com.github.philippheuer.credentialmanager:credentialmanager:0.1.2'
    shade group:'com.github.twitch4j', name:'twitch4j', version:'1.2.1'

}
// Example for how to get properties into the manifest for reading by the runtime..

jar {

    // Include shaded source in the built mod jar
    configurations.shade.each { dependency ->
        from(project.zipTree(dependency)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest {
        attributes([
            "Specification-Title": "vaultintegration",
            "Specification-Vendor": "vaultintegration",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"vaultintegration",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "vaultintegration.mixins.json"
        ])
    }
}
//
shadowJar {
    configurations = [project.configurations.compile]

    relocate 'org.apache', 'robot.org.apache'

    dependencies {
        include(dependency('commons-configuration:commons-configuration:1.10'))
        include(dependency('org.apache.commons:commons-compress:1.8.1'))
        include(dependency('org.apache.commons:commons-lang3:3.12.0'))
        include(dependency('commons-lang:commons-lang:2.6'))
        include(dependency('org.apache.httpcomponents:httpclient:4.3.3'))
        include(dependency('org.apache.httpcomponents:httpcore:4.3.2'))
        include(dependency('commons-logging:commons-logging:1.1.3'))
        include(dependency('org.apache.logging.log4j:log4j-api:2.11.2'))
        include(dependency('org.apache.logging.log4j:log4j-core:2.11.2'))

        include(dependency('com.github.twitch4j:twitch4j-auth:1.2.1:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-common:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-helix:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-pubsub:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-messaginginterface:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-eventsub-common:1.2.1'))
        include(dependency('com.github.twitch4j:twitch4j-chat:1.2.1'))
//        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
//        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
        include(dependency('com.github.philippheuer.credentialmanager:credentialmanager:0.1.2'))
        include(dependency('org.slf4j:slf4j-api:1.7.30'))
        include(dependency('com.github.philippheuer.events4j:events4j-api:0.9.5'))
        include(dependency('com.github.philippheuer.events4j:events4j-core:0.9.5'))
        include(dependency('com.github.philippheuer.events4j:events4j-handler-simple:0.9.5'))
        include(dependency('com.github.vladimir-bukhtoyarov:bucket4j-core:4.7.0'))

        include(dependency('io.github.openfeign:feign-core:11.0'))
        include(dependency('io.github.openfeign:feign-slf4j:11.0'))
        include(dependency('io.github.openfeign:feign-hystrix:11.0'))
        include(dependency('io.github.openfeign:feign-okhttp:11.0'))
        include(dependency('io.github.openfeign:feign-jackson:11.0'))

        include(dependency('com.github.ben-manes.caffeine:caffeine:2.8.6'))

        include(dependency('com.neovisionaries:nv-websocket-client:2.13'))

        include(dependency('com.squareup.okhttp3:okhttp:4.9.1'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib:1.4.10'))

        include(dependency('com.squareup.okio:okio:2.9.0'))

        include(dependency('io.micrometer:micrometer-core:1.3.2'))

        include(dependency('com.netflix.archaius:archaius-core:0.7.6'))
        include(dependency('com.netflix.hystrix:hystrix-core:1.5.18'))

        include(dependency('com.fasterxml.jackson.core:jackson-annotations:2.12.2'))
        include(dependency('com.fasterxml.jackson.core:jackson-core:2.12.2'))
        include(dependency('com.fasterxml.jackson.core:jackson-databind:2.12.2'))
        include(dependency('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.2'))

        include(dependency('io.reactivex:rxjava:1.2.0'))

        include(dependency('org.hdrhistogram:HdrHistogram:2.1.11'))
//        include(dependency('commons-configuration:commons-configuration:1.10'))
    }
}

//        include(dependency('org.apache.commons:commons-compress:1.8.1'))
//        include(dependency('org.apache.commons:commons-lang3:3.12.0'))
//        include(dependency('org.apache.commons:commons-configuration2:2.7.0'))
//        include(dependency('org.apache.httpcomponents:httpclient:4.3.3'))
//        include(dependency('org.apache.httpcomponents:httpcore:4.3.2'))
//        include(dependency('org.apache.maven:maven-artifact:3.6.3'))
//        include(dependency('commons-configuration:commons-configuration:1.10'))
//        include(dependency('commons-io:commons-io:2.8.0'))
//        include(dependency('commons-lang:commons-lang:2.6'))
//        include(dependency('commons-logging:commons-logging:1.1.3'))
//        exclude(dependency('com.mojang:brigadier:1.0.17'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
////        include(dependency('com.github.twitch4j:twitch4j:1.2.1'))
//    }
//}


//task relocateShadowJar(type: ConfigureShadowRelocation) {
//    target = tasks.shadowJar
//    prefix = "robotmonkey" // Default value is "shadow"
//
//}

//tasks.shadowJar.dependsOn tasks.relocateShadowJar
reobf {
    shadowJar{}
}
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}